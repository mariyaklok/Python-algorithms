'''Create a weighted graph '''
class Vertex:
    def __init__(self, apex):
        self.n = apex
        self.adjacentNeighbour = {}

    def add_neighbour(self, A, weight=0):
        if A not in self.adjacentNeighbour:
            #adding weight with neighbour 
            self.adjacentNeighbour[A] = weight

    def get_neighbourkeys(self):
        return self.adjacentNeighbour.keys()  

    def get_apex(self):
        return self.n

    def get_weight(self, A):
        return self.adjacentNeighbour[A]

class Graph:
    def __init__(self):
        self.vertices = {}
        self.number_vertices = 0

    def __iter__(self):
        '''Funtion to iterate over the vertices'''
        return iter(self.vertices.values())

    def add_vertex(self, apex):
        self.number_vertices = self.number_vertices + 1
        newVertex = Vertex(apex)
        self.vertices[apex] = newVertex
        return newVertex

    def get_vertex(self, i):
        if i in self.vertices:
            return self.vertices[i]
        else:
            return None

    def add_edges(self, v, w, dist = 0):
        if v in self.vertices and w in self.vertices:

            self.vertices[v].add_neighbour(self.vertices[w], dist)
            self.vertices[w].add_neighbour(self.vertices[v], dist)

    def get_vertices(self):
        return self.vertices.keys()

if __name__ == '__main__':

    g = Graph()

    g.add_vertex('0')
    g.add_vertex('1')
    g.add_vertex('2')
    g.add_vertex('3')
    g.add_vertex('4')
    g.add_vertex('5')
    g.add_vertex('6')
    g.add_vertex('7')
    g.add_vertex('8')
   

    g.add_edges('0', '1', 4)
    g.add_edges('0', '7', 8)
    g.add_edges('1', '2', 8)
    g.add_edges('1', '7', 11)
    g.add_edges('7', '6', 1)
    g.add_edges('7', '8', 7)
    g.add_edges('6', '8', 6)
    g.add_edges('6', '5', 2)
    g.add_edges('8', '2', 2)
    g.add_edges('2', '3', 7)
    g.add_edges('2', '5', 4)
    g.add_edges('3', '4', 9)
    g.add_edges('3', '5', 14)
    g.add_edges('5', '4', 10)

    for u in g:
        '''To print the graph'''
        for l in u.get_neighbourkeys():
            lid = u.get_apex()
            mid = l.get_apex()
            print ('( "%s" , "%s", "weight = %3d")'  % ( lid, mid, u.get_weight(l)))
